buildscript {
    ext {
        /*
         * Versions @ https://github.com/JetBrains/kotlin/releases/latest
         * Pick versions suffixed with `-release`
         * More likely to be limited by the version of the all-open plugin @
         * https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-maven-allopen
         */
        kotlinVersion = "$LIB_KOTLIN_VER"
        /*
        * Versions @ https://github.com/spring-projects/spring-boot/releases
        * Always pick versions suffixed with `.RELEASE`
        **/
        springBootVersion = "$LIB_SPRING_BOOT_VER"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath "org.jlleitschuh.gradle:ktlint-gradle:10.0.0"
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'io.codearte.nexus-staging' version "$PLUGIN_NEXUS_STAGING_VER"
    /* id  "org.jetbrains.dokka" version "$LIB_DOKKA_VER" */
}

repositories {
    mavenCentral()
}

apply plugin: "org.jlleitschuh.gradle.ktlint-idea"

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "jacoco"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    /* apply plugin: "org.jetbrains.dokka" */

    group "$PROJECT_GROUP"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    compileJava {
        sourceCompatibility = SOURCE_COMPATIBILITY
        targetCompatibility = TARGET_COMPATIBILITY
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=compatibility']
            jvmTarget = TARGET_COMPATIBILITY
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=compatibility']
            jvmTarget = TARGET_COMPATIBILITY
        }
    }

    test {
        dependsOn ktlintCheck
        useJUnitPlatform()
        finalizedBy jacocoTestReport
        testLogging {
            events "PASSED", "FAILED", "SKIPPED", "STANDARD_ERROR", "STANDARD_OUT"
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat "FULL"
            showStandardStreams System.getenv("TEST_STDOUT") == 'true'
        }
    }

    jacocoTestReport {
        dependsOn test
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    }

    if (!it.name.startsWith('example')) {
        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }

        jar {
            from "LICENSE.md"
        }

        java {
            withSourcesJar()
            withJavadocJar()
        }

        if (!version.toString().endsWith('-SNAPSHOT')) {
            ext["signing.keyId"] = System.env.SIGNING_KEY_ID  ?: project.findProperty('signing.keyId')
            ext["signing.password"] = System.env.SIGNING_PASSWORD  ?: project.findProperty('signing.password')
            ext["signing.secretKeyRingFile"] = System.env.SIGNING_SECRET_KEY_RING_FILE  ?: project.findProperty('signing.secretKeyRingFile')

            signing {
                sign publishing.publications
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    // to avoid "Publication only contains dependencies and/or constraints without a version" error
                    // see https://docs.gradle.org/6.2.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }

                    pom {
                        name = PROJECT_NAME
                        description = PROJECT_DESC
                        url = PROJECT_GIT_REPO_URL
                        scm {
                            url = PROJECT_GIT_REPO_URL
                            connection = PROJECT_GIT_REPO_URL
                            developerConnection = PROJECT_GIT_REPO_URL
                        }
                        licenses {
                            license {
                                name = PROJECT_LICENSE
                                url = PROJECT_LICENSE_URL
                                distribution = 'repo'
                            }
                        }
                        developers {
                            developer {
                                id = PROJECT_DEV_ID
                                name = PROJECT_DEV_NAME
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    name 'ossrh'
                    if (version.toString().endsWith("-SNAPSHOT")) {
                        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    } else {
                        url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    }
                    credentials {
                        username = System.env.OSS_USER_TOKEN_KEY ?: project.findProperty('ossrh.username') ?: ''
                        password = System.env.OSS_USER_TOKEN_PASS ?: project.findProperty('ossrh.password') ?: ''
                    }
                }
            }
        }
    }
}

nexusStaging {
    username = System.env.OSS_USER_TOKEN_KEY ?: project.findProperty('ossrh.username') ?: ''
    password = System.env.OSS_USER_TOKEN_PASS ?: project.findProperty('ossrh.password') ?: ''
    packageGroup =  "$PROJECT_GROUP"
}

task updateVersion {
    doLast {
        def from = project.hasProperty('version')? project.property('version') : '1.0.0'
        from = from.replace('-SNAPSHOT', "")
        if(!project.hasProperty('newVersion')) {
            throw new GradleException('No version specified. \n\n\t **** Please run the task with ./gradlew -PnewVersion=<version> updateVersion ****')
        }

        def to = project.property('newVersion')
        logger.info "Bumping App Version from $from ==> $to"

        ant.replace(
                dir: project.projectDir,
                token: from,
                value: to,
                includes: 'gradle.properties,**/*.md'
        )
    }
}
